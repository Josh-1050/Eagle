
attiny48_stepper_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000260  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00000270  000002e4  2**0
                  ALLOC
  3 .stab         0000057c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000075a  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__vector_5>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e0 e6       	ldi	r30, 0x60	; 96
  3c:	f2 e0       	ldi	r31, 0x02	; 2
  3e:	02 c0       	rjmp	.+4      	; 0x44 <.do_copy_data_start>

00000040 <.do_copy_data_loop>:
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0

00000044 <.do_copy_data_start>:
  44:	a0 31       	cpi	r26, 0x10	; 16
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <.do_copy_data_loop>

0000004a <__do_clear_bss>:
  4a:	11 e0       	ldi	r17, 0x01	; 1
  4c:	a0 e1       	ldi	r26, 0x10	; 16
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a2 31       	cpi	r26, 0x12	; 18
  56:	b1 07       	cpc	r27, r17
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	ad d0       	rcall	.+346    	; 0x1b6 <main>
  5c:	ff c0       	rjmp	.+510    	; 0x25c <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <__vector_5>:

uint8_t step_normal[] ={A,B,A_,B_};
uint8_t step_normal_full[]={A+B_,A+B,A_+B,A_+B_};
uint8_t step_half[]={A,A+B,B,B+A_,A_,A_+B_,B_,B_+A};

ISR(PCINT2_vect){
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25


	if(CHECKBIT(PIND,STEP_PIN)){
  6e:	4b 9b       	sbis	0x09, 3	; 9
  70:	0f c0       	rjmp	.+30     	; 0x90 <__vector_5+0x30>

		if(CHECKBIT(PIND,DIR_PIN)){
  72:	4c 9b       	sbis	0x09, 4	; 9
  74:	14 c0       	rjmp	.+40     	; 0x9e <__vector_5+0x3e>
			counter++;
  76:	80 91 11 01 	lds	r24, 0x0111
  7a:	8f 5f       	subi	r24, 0xFF	; 255
  7c:	80 93 11 01 	sts	0x0111, r24
			if(counter > no_steps) counter=0;
  80:	90 91 11 01 	lds	r25, 0x0111
  84:	80 91 10 01 	lds	r24, 0x0110
  88:	89 17       	cp	r24, r25
  8a:	14 f4       	brge	.+4      	; 0x90 <__vector_5+0x30>
  8c:	10 92 11 01 	sts	0x0111, r1
			if(counter<0) counter = no_steps;
		}

	}

}
  90:	9f 91       	pop	r25
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti
			counter++;
			if(counter > no_steps) counter=0;
		}

		else{
			counter--;
  9e:	80 91 11 01 	lds	r24, 0x0111
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	80 93 11 01 	sts	0x0111, r24
			if(counter<0) counter = no_steps;
  a8:	80 91 11 01 	lds	r24, 0x0111
  ac:	87 ff       	sbrs	r24, 7
  ae:	f0 cf       	rjmp	.-32     	; 0x90 <__vector_5+0x30>
  b0:	80 91 10 01 	lds	r24, 0x0110
  b4:	80 93 11 01 	sts	0x0111, r24
  b8:	eb cf       	rjmp	.-42     	; 0x90 <__vector_5+0x30>

000000ba <full_step>:
void full_step(){
	while(1){

		//TODO enable pin

			if(!CHECKBIT(PINB,5)){
  ba:	1d 99       	sbic	0x03, 5	; 3
  bc:	34 c0       	rjmp	.+104    	; 0x126 <full_step+0x6c>

				PORTC = PORTC | (3 & step_normal[counter]); //outputs A, A_
  be:	98 b1       	in	r25, 0x08	; 8
  c0:	e0 91 11 01 	lds	r30, 0x0111
  c4:	ff 27       	eor	r31, r31
  c6:	e7 fd       	sbrc	r30, 7
  c8:	f0 95       	com	r31
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	80 81       	ld	r24, Z
  d0:	83 70       	andi	r24, 0x03	; 3
  d2:	89 2b       	or	r24, r25
  d4:	88 b9       	out	0x08, r24	; 8
				PORTC = PORTC & (3 | step_normal[counter]);
  d6:	98 b1       	in	r25, 0x08	; 8
  d8:	e0 91 11 01 	lds	r30, 0x0111
  dc:	ff 27       	eor	r31, r31
  de:	e7 fd       	sbrc	r30, 7
  e0:	f0 95       	com	r31
  e2:	e0 50       	subi	r30, 0x00	; 0
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 81       	ld	r24, Z
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	89 23       	and	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
			}
			else{
				PORTC = PORTC & 252;
			}

			if(!CHECKBIT(PINC,5)){
  ee:	35 99       	sbic	0x06, 5	; 6
  f0:	1f c0       	rjmp	.+62     	; 0x130 <full_step+0x76>

				PORTC = PORTC | (12 & step_normal[counter]); //outputs B, B_
  f2:	98 b1       	in	r25, 0x08	; 8
  f4:	e0 91 11 01 	lds	r30, 0x0111
  f8:	ff 27       	eor	r31, r31
  fa:	e7 fd       	sbrc	r30, 7
  fc:	f0 95       	com	r31
  fe:	e0 50       	subi	r30, 0x00	; 0
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	80 81       	ld	r24, Z
 104:	8c 70       	andi	r24, 0x0C	; 12
 106:	89 2b       	or	r24, r25
 108:	88 b9       	out	0x08, r24	; 8
				PORTC = PORTC & (12 | step_normal[counter]);
 10a:	98 b1       	in	r25, 0x08	; 8
 10c:	e0 91 11 01 	lds	r30, 0x0111
 110:	ff 27       	eor	r31, r31
 112:	e7 fd       	sbrc	r30, 7
 114:	f0 95       	com	r31
 116:	e0 50       	subi	r30, 0x00	; 0
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	80 81       	ld	r24, Z
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	89 23       	and	r24, r25
 120:	88 b9       	out	0x08, r24	; 8
void full_step(){
	while(1){

		//TODO enable pin

			if(!CHECKBIT(PINB,5)){
 122:	1d 9b       	sbis	0x03, 5	; 3
 124:	cc cf       	rjmp	.-104    	; 0xbe <full_step+0x4>

				PORTC = PORTC | (3 & step_normal[counter]); //outputs A, A_
				PORTC = PORTC & (3 | step_normal[counter]);
			}
			else{
				PORTC = PORTC & 252;
 126:	88 b1       	in	r24, 0x08	; 8
 128:	8c 7f       	andi	r24, 0xFC	; 252
 12a:	88 b9       	out	0x08, r24	; 8
			}

			if(!CHECKBIT(PINC,5)){
 12c:	35 9b       	sbis	0x06, 5	; 6
 12e:	e1 cf       	rjmp	.-62     	; 0xf2 <full_step+0x38>

				PORTC = PORTC | (12 & step_normal[counter]); //outputs B, B_
				PORTC = PORTC & (12 | step_normal[counter]);
			}
			else{
				PORTC = PORTC & 243;
 130:	88 b1       	in	r24, 0x08	; 8
 132:	83 7f       	andi	r24, 0xF3	; 243
 134:	88 b9       	out	0x08, r24	; 8
 136:	c1 cf       	rjmp	.-126    	; 0xba <full_step>

00000138 <half_step>:
void half_step(){
	while(1){

		//TODO enable pin

			if(!CHECKBIT(PINB,5)){
 138:	1d 99       	sbic	0x03, 5	; 3
 13a:	34 c0       	rjmp	.+104    	; 0x1a4 <half_step+0x6c>

				PORTC = PORTC | (3 & step_half[counter]); //outputs A, A_
 13c:	98 b1       	in	r25, 0x08	; 8
 13e:	e0 91 11 01 	lds	r30, 0x0111
 142:	ff 27       	eor	r31, r31
 144:	e7 fd       	sbrc	r30, 7
 146:	f0 95       	com	r31
 148:	e8 5f       	subi	r30, 0xF8	; 248
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	80 81       	ld	r24, Z
 14e:	83 70       	andi	r24, 0x03	; 3
 150:	89 2b       	or	r24, r25
 152:	88 b9       	out	0x08, r24	; 8
				PORTC = PORTC & (3 | step_half[counter]);
 154:	98 b1       	in	r25, 0x08	; 8
 156:	e0 91 11 01 	lds	r30, 0x0111
 15a:	ff 27       	eor	r31, r31
 15c:	e7 fd       	sbrc	r30, 7
 15e:	f0 95       	com	r31
 160:	e8 5f       	subi	r30, 0xF8	; 248
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	80 81       	ld	r24, Z
 166:	83 60       	ori	r24, 0x03	; 3
 168:	89 23       	and	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
			}
			else{
				PORTC = PORTC & 252;
			}

			if(!CHECKBIT(PINC,5)){
 16c:	35 99       	sbic	0x06, 5	; 6
 16e:	1f c0       	rjmp	.+62     	; 0x1ae <half_step+0x76>

				PORTC = PORTC | (12 & step_half[counter]); //outputs B, B_
 170:	98 b1       	in	r25, 0x08	; 8
 172:	e0 91 11 01 	lds	r30, 0x0111
 176:	ff 27       	eor	r31, r31
 178:	e7 fd       	sbrc	r30, 7
 17a:	f0 95       	com	r31
 17c:	e8 5f       	subi	r30, 0xF8	; 248
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	80 81       	ld	r24, Z
 182:	8c 70       	andi	r24, 0x0C	; 12
 184:	89 2b       	or	r24, r25
 186:	88 b9       	out	0x08, r24	; 8
				PORTC = PORTC & (12 | step_half[counter]);
 188:	98 b1       	in	r25, 0x08	; 8
 18a:	e0 91 11 01 	lds	r30, 0x0111
 18e:	ff 27       	eor	r31, r31
 190:	e7 fd       	sbrc	r30, 7
 192:	f0 95       	com	r31
 194:	e8 5f       	subi	r30, 0xF8	; 248
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 81       	ld	r24, Z
 19a:	8c 60       	ori	r24, 0x0C	; 12
 19c:	89 23       	and	r24, r25
 19e:	88 b9       	out	0x08, r24	; 8
void half_step(){
	while(1){

		//TODO enable pin

			if(!CHECKBIT(PINB,5)){
 1a0:	1d 9b       	sbis	0x03, 5	; 3
 1a2:	cc cf       	rjmp	.-104    	; 0x13c <half_step+0x4>

				PORTC = PORTC | (3 & step_half[counter]); //outputs A, A_
				PORTC = PORTC & (3 | step_half[counter]);
			}
			else{
				PORTC = PORTC & 252;
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	8c 7f       	andi	r24, 0xFC	; 252
 1a8:	88 b9       	out	0x08, r24	; 8
			}

			if(!CHECKBIT(PINC,5)){
 1aa:	35 9b       	sbis	0x06, 5	; 6
 1ac:	e1 cf       	rjmp	.-62     	; 0x170 <half_step+0x38>

				PORTC = PORTC | (12 & step_half[counter]); //outputs B, B_
				PORTC = PORTC & (12 | step_half[counter]);
			}
			else{
				PORTC = PORTC & 243;
 1ae:	88 b1       	in	r24, 0x08	; 8
 1b0:	83 7f       	andi	r24, 0xF3	; 243
 1b2:	88 b9       	out	0x08, r24	; 8
 1b4:	c1 cf       	rjmp	.-126    	; 0x138 <half_step>

000001b6 <main>:
		}
}

int main() {

	counter = 0;
 1b6:	10 92 11 01 	sts	0x0111, r1
	DDRC = 15;
 1ba:	8f e0       	ldi	r24, 0x0F	; 15
 1bc:	87 b9       	out	0x07, r24	; 7
	DDRD = 6;
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	8a b9       	out	0x0a, r24	; 10

	//configure interrupts for STEP
	PCICR |= (1<<PCIE2);
 1c2:	80 91 68 00 	lds	r24, 0x0068
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	80 93 68 00 	sts	0x0068, r24
	PCMSK2 |= (1<<PCINT19);
 1cc:	80 91 6d 00 	lds	r24, 0x006D
 1d0:	88 60       	ori	r24, 0x08	; 8
 1d2:	80 93 6d 00 	sts	0x006D, r24

	sei();
 1d6:	78 94       	sei

	no_steps = 7;
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	80 93 10 01 	sts	0x0110, r24
void half_step(){
	while(1){

		//TODO enable pin

			if(!CHECKBIT(PINB,5)){
 1de:	1d 99       	sbic	0x03, 5	; 3
 1e0:	34 c0       	rjmp	.+104    	; 0x24a <__stack+0x4b>

				PORTC = PORTC | (3 & step_half[counter]); //outputs A, A_
 1e2:	98 b1       	in	r25, 0x08	; 8
 1e4:	e0 91 11 01 	lds	r30, 0x0111
 1e8:	ff 27       	eor	r31, r31
 1ea:	e7 fd       	sbrc	r30, 7
 1ec:	f0 95       	com	r31
 1ee:	e8 5f       	subi	r30, 0xF8	; 248
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	80 81       	ld	r24, Z
 1f4:	83 70       	andi	r24, 0x03	; 3
 1f6:	89 2b       	or	r24, r25
 1f8:	88 b9       	out	0x08, r24	; 8
				PORTC = PORTC & (3 | step_half[counter]);
 1fa:	98 b1       	in	r25, 0x08	; 8
 1fc:	e0 91 11 01 	lds	r30, 0x0111
 200:	ff 27       	eor	r31, r31
 202:	e7 fd       	sbrc	r30, 7
 204:	f0 95       	com	r31
 206:	e8 5f       	subi	r30, 0xF8	; 248
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	80 81       	ld	r24, Z
 20c:	83 60       	ori	r24, 0x03	; 3
 20e:	89 23       	and	r24, r25
 210:	88 b9       	out	0x08, r24	; 8
			}
			else{
				PORTC = PORTC & 252;
			}

			if(!CHECKBIT(PINC,5)){
 212:	35 99       	sbic	0x06, 5	; 6
 214:	1f c0       	rjmp	.+62     	; 0x254 <__stack+0x55>

				PORTC = PORTC | (12 & step_half[counter]); //outputs B, B_
 216:	98 b1       	in	r25, 0x08	; 8
 218:	e0 91 11 01 	lds	r30, 0x0111
 21c:	ff 27       	eor	r31, r31
 21e:	e7 fd       	sbrc	r30, 7
 220:	f0 95       	com	r31
 222:	e8 5f       	subi	r30, 0xF8	; 248
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	80 81       	ld	r24, Z
 228:	8c 70       	andi	r24, 0x0C	; 12
 22a:	89 2b       	or	r24, r25
 22c:	88 b9       	out	0x08, r24	; 8
				PORTC = PORTC & (12 | step_half[counter]);
 22e:	98 b1       	in	r25, 0x08	; 8
 230:	e0 91 11 01 	lds	r30, 0x0111
 234:	ff 27       	eor	r31, r31
 236:	e7 fd       	sbrc	r30, 7
 238:	f0 95       	com	r31
 23a:	e8 5f       	subi	r30, 0xF8	; 248
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	80 81       	ld	r24, Z
 240:	8c 60       	ori	r24, 0x0C	; 12
 242:	89 23       	and	r24, r25
 244:	88 b9       	out	0x08, r24	; 8
void half_step(){
	while(1){

		//TODO enable pin

			if(!CHECKBIT(PINB,5)){
 246:	1d 9b       	sbis	0x03, 5	; 3
 248:	cc cf       	rjmp	.-104    	; 0x1e2 <main+0x2c>

				PORTC = PORTC | (3 & step_half[counter]); //outputs A, A_
				PORTC = PORTC & (3 | step_half[counter]);
			}
			else{
				PORTC = PORTC & 252;
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	8c 7f       	andi	r24, 0xFC	; 252
 24e:	88 b9       	out	0x08, r24	; 8
			}

			if(!CHECKBIT(PINC,5)){
 250:	35 9b       	sbis	0x06, 5	; 6
 252:	e1 cf       	rjmp	.-62     	; 0x216 <__stack+0x17>

				PORTC = PORTC | (12 & step_half[counter]); //outputs B, B_
				PORTC = PORTC & (12 | step_half[counter]);
			}
			else{
				PORTC = PORTC & 243;
 254:	88 b1       	in	r24, 0x08	; 8
 256:	83 7f       	andi	r24, 0xF3	; 243
 258:	88 b9       	out	0x08, r24	; 8
 25a:	c1 cf       	rjmp	.-126    	; 0x1de <main+0x28>

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
